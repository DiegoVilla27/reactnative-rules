{
  "root": true,
  "env": {
    "browser": true,
    "es2020": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime", // This line indicates that we are utilizing React 17 or higher and require its new rules
    "@react-native"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true, // We enable JSX support
      "tsx": true // We enable TSX support
    }
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "plugins": [
    "react-refresh",
    "@typescript-eslint",
    "react",
    "react-native",
    "html"
  ],
  "rules": {
    "react-native/no-inline-styles": "error", // Rule to disable inline styles
    "react-hooks/rules-of-hooks": "error", // Rules of hooks
    "react/react-in-jsx-scope": "off", // Rule for allows the use of a TSX or JSX component without the need to import React
    "react/jsx-uses-react": "off",
    "react/jsx-uses-vars": "error", // Rule for disallow use var
    "react/hook-use-state": "error", // Rule to check whether unstructured value and setter variables in a useState() call are named symmetrically
    "react/jsx-key": "error", // Rule for using Keys in Child Elements within Loops
    "quotes": [ // Rule for using double quotes
      "error",
      "double",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "@typescript-eslint/quotes": [
      "error",
      "double",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "eqeqeq": [ // Rule for strict equality (=== or !==)
      "error",
      "smart"
    ],
    "no-console": [ // Rule to avoid using console statements
      "error"
    ],
    "no-else-return": [ // Rule to disallow else as a return
      "error",
      {
        "allowElseIf": true
      }
    ],
    "no-empty": [ // Rule to disallow empty blocks
      "error",
      {
        "allowEmptyCatch": false
      }
    ],
    "no-extra-semi": [ // Rule to disallow extra semicolons
      "error"
    ],
    "@typescript-eslint/no-extra-semi": [
      "error"
    ],
    "semi": [ // Rule to ensure there is a semicolon at the end
      "error",
      "always",
      {
        "omitLastInOneLineBlock": true,
        "omitLastInOneLineClassBody": true
      }
    ],
    "@typescript-eslint/semi": [
      "error",
      "always",
      {
        "omitLastInOneLineBlock": true,
        "omitLastInOneLineClassBody": true
      }
    ],
    "comma-dangle": ["off", "never"]
  }
}